[{"/home/matt/dev/react-test/src/index.js":"1","/home/matt/dev/react-test/src/reportWebVitals.js":"2","/home/matt/dev/react-test/src/js/react/App.js":"3","/home/matt/dev/react-test/src/js/react/gridDisplay.jsx":"4","/home/matt/dev/react-test/src/js/models/lifeGrid.js":"5"},{"size":509,"mtime":1617239003164,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1617150032928,"results":"8","hashOfConfig":"7"},{"size":271,"mtime":1617239003164,"results":"9","hashOfConfig":"7"},{"size":910,"mtime":1617240219898,"results":"10","hashOfConfig":"7"},{"size":2172,"mtime":1617239090829,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"130d5hm",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"24"},"/home/matt/dev/react-test/src/index.js",[],"/home/matt/dev/react-test/src/reportWebVitals.js",[],"/home/matt/dev/react-test/src/js/react/App.js",["25"],"import logo from '../../logo.svg';\nimport '../../App.css';\nimport GridDisplay from './gridDisplay'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <GridDisplay />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","/home/matt/dev/react-test/src/js/react/gridDisplay.jsx",["26"],"import React from 'react'\nimport LifeGrid from '../models/lifeGrid'\n\nexport default class GridDisplay extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      lifeGrid: new LifeGrid(10,10)\n    }\n\n    this.createGameCell = this.createGameCell.bind(this)\n    this.iterate = this.iterate.bind(this)\n  }\n\n  createGameCell(isAlive) {\n    const cellClass = isAlive ? 'alive' : 'dead'\n    return (\n      <div className={'cell' + ' ' + cellClass}></div>\n    )\n  }\n\n  render() {\n    const lifeGridRows = this.lifeGrid.map( row => {\n      const cells = row.map(cell => {\n        return this.createGameCell(cell.isAlive)\n      })\n\n      return (\n        <div className='cellRow'>{cells}</div>\n      )\n    })\n    return (\n      <div>\n        <h1> Oh yeah, It is game of life time! </h1>\n        <div className='lifeGrid'>\n          {lifeGridRows}\n        </div>\n      </div>\n    );\n  }\n}\n","/home/matt/dev/react-test/src/js/models/lifeGrid.js",["27","28","29"],"const TURN_ALIVE = [3]\nconst STAY_ALIVE = [2,3]\n\nexport default class LifeGrid {\n  constructor(xSize, ySize) {\n    this.xSize = xSize\n    this.ySize = ySize\n\n    const grids = this.generateGrids(xSize, ySize)\n    this.lifeGrid = grids.lifeGrid\n    this.tempGrid = grids.tempGrid\n  }\n\n  generateGrids(xSize, ySize) {\n    const lifeGrid = []\n    const tempGrid = []\n\n    for (let x=0; x<xSize; x++) {\n      lifeGrid[x] = []\n      tempGrid[x] = []\n\n      for (let y=0; y<ySize; y++) {\n        lifeGrid[x][y] = new Cell()\n        tempGrid[x][y] = new Cell()\n      }\n    }\n\n    return {\n      lifeGrid,\n      tempGrid,\n    }\n  }\n\n  get grid() {\n    return this.lifeGrid\n  }\n\n  setCell(x, y, isAlive) {\n    if (x >= 0 && x < this.xSize && y >= 0 && y < this.ySize) {\n      this.lifeGrid[x][y].isAlive = isAlive\n    } else {\n      throw('Attempted to set a nonexistant cell')\n    }\n  }\n\n  iterate() {\n    for (let x=0; x<this.xSize; x++) {\n      for (let y=0; y<this.Size; y++) {\n        this.applyRulesToCell(x,y)\n      }\n    }\n\n    this.applyTempGridToLifeGrid()\n  }\n\n  applyRulesToCell(x,y) {\n    const cell = this.lifeGrid[x][y]\n    const numberOfLivingNeighbors = this.getNumberOfLivingNeighbors(x, y)\n\n    if (cell.isAlive) {\n      this.tempGrid[x][y].isAlive = STAY_ALIVE.includes(numberOfLivingNeighbors)\n    } else {\n      this.tempGrid[x][y].isAlive = TURN_ALIVE.includes(numberOfLivingNeighbors)\n    }\n  }\n\n  getNumberOfLivingNeighbors(x, y) {\n    const neighborCells = [\n      this.lifeGrid[x-1]?.[y-1],\n        this.lifeGrid[x-1]?.[y],\n        this.lifeGrid[x-1]?.[y+1],\n        this.lifeGrid[x]?.  [y-1],\n        this.lifeGrid[x]?.  [y+1],\n        this.lifeGrid[x+1]?.[y-1],\n        this.lifeGrid[x+1]?.[y],\n        this.lifeGrid[x+1]?.[y+1],\n    ].filter( c => c !== undefined )\n    const livingNeighbors = neighborCells.filter( (c) => c.isAlive )\n\n    return livingNeighbors.length\n  }\n\n  applyTempGridToLifeGrid() {\n    for (let x=0; x<this.xSize; x++) {\n      for (let y=0; y<this.ySize; y++) {\n        this.lifeGrid[x][y].isAlive = this.tempGrid[x][y].isAlive\n      }\n    }\n  }\n}\n\nclass Cell {\n  constructor(isAlive = false) {\n    this.isAlive = isAlive\n  }\n}\n",{"ruleId":"30","severity":1,"message":"31","line":1,"column":8,"nodeType":"32","messageId":"33","endLine":1,"endColumn":12},{"ruleId":"34","severity":1,"message":"35","line":18,"column":30,"nodeType":"36","messageId":"37","endLine":18,"endColumn":31},{"ruleId":"38","severity":1,"message":"39","line":42,"column":7,"nodeType":"40","messageId":"41","endLine":42,"endColumn":51},{"ruleId":"42","severity":1,"message":"43","line":72,"column":9,"nodeType":"44","messageId":"45","endLine":72,"endColumn":34,"fix":"46"},{"ruleId":"42","severity":1,"message":"47","line":73,"column":9,"nodeType":"44","messageId":"45","endLine":73,"endColumn":34,"fix":"48"},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","no-whitespace-before-property","Unexpected whitespace before property y-1.","MemberExpression","unexpectedWhitespace",{"range":"49","text":"50"},"Unexpected whitespace before property y+1.",{"range":"51","text":"50"},[1601,1605],"?.",[1636,1640]]