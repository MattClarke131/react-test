{"version":3,"sources":["logo.svg","js/models/lifeGrid.js","js/react/gridDisplay.jsx","js/react/App.js","reportWebVitals.js","index.js"],"names":["TURN_ALIVE","STAY_ALIVE","LifeGrid","xSize","ySize","this","grids","generateGrids","lifeGrid","tempGrid","x","y","Cell","isAlive","Size","applyRulesToCell","applyTempGridToLifeGrid","cell","numberOfLivingNeighbors","getNumberOfLivingNeighbors","includes","filter","c","undefined","length","GridDisplay","props","state","createGameCell","bind","cellClass","className","lifeGridRows","map","row","cells","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d5ef87bd.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","const TURN_ALIVE = [3]\nconst STAY_ALIVE = [2,3]\n\nexport default class LifeGrid {\n  constructor(xSize, ySize) {\n    this.xSize = xSize\n    this.ySize = ySize\n\n    const grids = this.generateGrids(xSize, ySize)\n    this.lifeGrid = grids.lifeGrid\n    this.tempGrid = grids.tempGrid\n  }\n\n  generateGrids(xSize, ySize) {\n    const lifeGrid = []\n    const tempGrid = []\n\n    for (let x=0; x<xSize; x++) {\n      lifeGrid[x] = []\n      tempGrid[x] = []\n\n      for (let y=0; y<ySize; y++) {\n        lifeGrid[x][y] = new Cell()\n        tempGrid[x][y] = new Cell()\n      }\n    }\n\n    return {\n      lifeGrid,\n      tempGrid,\n    }\n  }\n\n  get grid() {\n    return this.lifeGrid\n  }\n\n  setCell(x, y, isAlive) {\n    if (x >= 0 && x < this.xSize && y >= 0 && y < this.ySize) {\n      this.lifeGrid[x][y].isAlive = isAlive\n    } else {\n      throw('Attempted to set a nonexistant cell')\n    }\n  }\n\n  iterate() {\n    for (let x=0; x<this.xSize; x++) {\n      for (let y=0; y<this.Size; y++) {\n        this.applyRulesToCell(x,y)\n      }\n    }\n\n    this.applyTempGridToLifeGrid()\n  }\n\n  applyRulesToCell(x,y) {\n    const cell = this.lifeGrid[x][y]\n    const numberOfLivingNeighbors = this.getNumberOfLivingNeighbors(x, y)\n\n    if (cell.isAlive) {\n      this.tempGrid[x][y].isAlive = STAY_ALIVE.includes(numberOfLivingNeighbors)\n    } else {\n      this.tempGrid[x][y].isAlive = TURN_ALIVE.includes(numberOfLivingNeighbors)\n    }\n  }\n\n  getNumberOfLivingNeighbors(x, y) {\n    const neighborCells = [\n      this.lifeGrid[x-1]?.[y-1],\n        this.lifeGrid[x-1]?.[y],\n        this.lifeGrid[x-1]?.[y+1],\n        this.lifeGrid[x]?.  [y-1],\n        this.lifeGrid[x]?.  [y+1],\n        this.lifeGrid[x+1]?.[y-1],\n        this.lifeGrid[x+1]?.[y],\n        this.lifeGrid[x+1]?.[y+1],\n    ].filter( c => c !== undefined )\n    const livingNeighbors = neighborCells.filter( (c) => c.isAlive )\n\n    return livingNeighbors.length\n  }\n\n  applyTempGridToLifeGrid() {\n    for (let x=0; x<this.xSize; x++) {\n      for (let y=0; y<this.ySize; y++) {\n        this.lifeGrid[x][y].isAlive = this.tempGrid[x][y].isAlive\n      }\n    }\n  }\n}\n\nclass Cell {\n  constructor(isAlive = false) {\n    this.isAlive = isAlive\n  }\n}\n","import React from 'react'\nimport LifeGrid from '../models/lifeGrid'\n\nexport default class GridDisplay extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      lifeGrid: new LifeGrid(10,10)\n    }\n\n    this.createGameCell = this.createGameCell.bind(this)\n  }\n\n  createGameCell(isAlive) {\n    const cellClass = isAlive ? 'alive' : 'dead'\n    return (\n      <div className={'cell' + ' ' + cellClass}></div>\n    )\n  }\n\n  render() {\n    const lifeGridRows = this.lifeGrid.map( row => {\n      const cells = row.map(cell => {\n        return this.createGameCell(cell.isAlive)\n      })\n\n      return (\n        <div className='cellRow'>{cells}</div>\n      )\n    })\n    return (\n      <div>\n        <h1> Oh yeah, It is game of life time! </h1>\n        <div className='lifeGrid'>\n          {lifeGridRows}\n        </div>\n      </div>\n    );\n  }\n}\n","import logo from '../../logo.svg';\nimport '../../App.css';\nimport GridDisplay from './gridDisplay'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <GridDisplay />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './js/react/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}